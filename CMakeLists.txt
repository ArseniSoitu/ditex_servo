PROJECT(wing_servo)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.0 FATAL_ERROR)

ENABLE_LANGUAGE(ASM)
#SET(CMAKE_ECLIPSE_VERSION 4.6) 
SET(MY_PROJECT_NAME wing_servo_ditex)
SET(CMAKE_TOOLCHAIN_FILE ${PROJECT_SOURCE_DIR}/cmake/stm32.cmake)

SET(FLAGS_COMMON
		"-pedantic"
		"-Wall"
		"-Wcast-align"
		"-Wcast-qual"
		"-Wextra"
		"-Winline"
		"-Wshadow"
)

IF(CMAKE_BUILD_TYPE MATCHES Debug)
  SET(COMPILE_DEFINITIONS_DEBUG -O0 -g -DDEBUG)
  message("COMPILE_DEFINITIONS_DEBUG = ${COMPILE_DEFINITIONS_DEBUG}")
  message("Debug build.")
ELSEIF(CMAKE_BUILD_TYPE MATCHES Release)
  SET(COMPILE_DEFINITIONS_RELEASE -Os -fno-inline-functions -DNDEBUG)
  message("COMPILE_DEFINITIONS_DEBUG = ${COMPILE_DEFINITIONS_DEBUG}")
  message("Release build.")
ENDIF()

STRING(REPLACE "." "" FLAGS_BOARD "-DBOARD=${BOARD}")
STRING(REPLACE ";" " " FLAGS_CPU "${FLAGS_CPU}")
STRING(REPLACE ";" " " FLAGS_COMMON "${FLAGS_COMMON}")

IF(NOT DEFINED OPENCM3_DIR)
	SET(OPENCM3_DIR "${PROJECT_SOURCE_DIR}/../libopencm3")
ENDIF(NOT DEFINED OPENCM3_DIR)

IF(NOT DEFINED OPENCM3_LIB_DIR)
	SET(OPENCM3_LIB_DIR ${OPENCM3_DIR})
ENDIF(NOT DEFINED OPENCM3_LIB_DIR)

IF(NOT DEFINED PLAZCAN_DIR)
	SET(PLAZCAN_DIR "${PROJECT_SOURCE_DIR}/../libplazcan")
ENDIF(NOT DEFINED PLAZCAN_DIR)

IF(NOT DEFINED PLAZCAN_LIB_DIR)
	SET(PLAZCAN_LIB_DIR ${PLAZCAN_DIR})
ENDIF(NOT DEFINED PLAZCAN_LIB_DIR)


add_definitions(
                -DSTM32F1)

SET(ARCH "cortex-m3")

IF (ARCH STREQUAL "cortex-m3")
	SET(CONTROLLER "STM32F1")
ENDIF (ARCH STREQUAL "cortex-m3")

# Main flags
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11 ${FLAGS_CPU} ${FLAGS_COMMON} ${FLAGS_BUILD} ${FLAGS_BOARD}")
SET(CMAKE_CXX_FLAGS "-std=c++11 ${FLAGS_CPU} ${FLAGS_COMMON} ${FLAGS_BUILD} ${FLAGS_BOARD}")
# Project related flags
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D${CONTROLLER}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D${CONTROLLER}")

SET(PROJECT_SOURCES
  src/main.cpp
  src/drivers/SerialMessages.cpp
  src/drivers/SystemTimer.cpp
#  src/drivers/CanLowLevel.cpp
#  src/drivers/utils.cpp
)

SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")
SET(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "")

SET(LINKER_SCRIPT "${OPENCM3_DIR}/lib/stm32/f1/stm32f103xb.ld")
#SET(LINKER_SCRIPT "${OPENCM3_DIR}/lib/stm32/f1/stm32f103x8.ld")
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --specs=nosys.specs --specs=nano.specs -Wl,--no-wchar-size-warning -Xlinker --gc-sections")
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -T ${LINKER_SCRIPT}")
message("CMAKE_EXE_LINKER_FLAGS = ${CMAKE_EXE_LINKER_FLAGS}")

INCLUDE_DIRECTORIES(
		${PROJECT_SOURCE_DIR}/include
		${OPENCM3_DIR}/include
		${PLAZCAN_DIR}
)

LINK_DIRECTORIES(
		${OPENCM3_LIB_DIR}/lib/
		${PLAZCAN_LIB_DIR}/build_cortex-m3/
)

ADD_EXECUTABLE(${MY_PROJECT_NAME}.elf ${PROJECT_SOURCES})

ADD_CUSTOM_COMMAND(TARGET ${MY_PROJECT_NAME}.elf POST_BUILD COMMAND ${CC_OBJCOPY} ARGS -Oihex ${MY_PROJECT_NAME}.elf ${MY_PROJECT_NAME}.hex)
ADD_CUSTOM_COMMAND(TARGET ${MY_PROJECT_NAME}.elf POST_BUILD COMMAND ${CC_OBJCOPY} ARGS -Obinary ${MY_PROJECT_NAME}.elf ${MY_PROJECT_NAME}.bin)

#TARGET_LINK_LIBRARIES(${MY_PROJECT_NAME}.elf stdc++ ${ITK_LIBRARIES} opencm3_stm32f0)
TARGET_LINK_LIBRARIES(${MY_PROJECT_NAME}.elf stdc++ opencm3_stm32f1  plazcan)


